@typeparam TItem
<!-- Row -->
<div class="row">
    <!-- Datatables -->
    <div class="col-xl-12 col-lg-12 mb-4">
        <div class="card bg-gradient-dark">
            <div class="card-header py-3 d-flex flex-row align-items-center bg-gradient-success justify-content-between">
                <h6 class="m-0 font-weight-bold text-white">@Title</h6>

            </div>
            <div class="table-responsive">
                <table class="table align-items-center table-flush">
                    <thead class="thead-light">
                        <tr>
                            @GridColumns
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in ItemList)
                        {
            <tr>

                @GridRow(item)
            </tr>
}



                    </tbody>
                </table>
            </div>
            <div class="card-footer bg-gradient-success">
                <button class="btn btn-secondary" @onclick="@(e => NavigateTo("first"))">@("<<")</button>
                <button class="btn btn-secondary" @onclick="@(e => NavigateTo("prev"))">Prev</button>
                @for (int i = 0; i < TotalPages; i++)
                {
                    var pageNumber = i;
    <button class="btn @(CurrentPage == pageNumber? "btn-dark":"btn-info")"
            @onclick="@(e => UpdateList(pageNumber))">
        @(i + 1)
    </button>}
                <button class="btn btn-secondary" @onclick="@(e => NavigateTo("next"))">Next</button>
                <button class="btn btn-secondary" @onclick="@(e => NavigateTo("last"))">@(">>")</button>
            </div>
        </div>
    </div>
</div>


@code { [Parameter]
            public RenderFragment GridColumns { get; set; }

            [Parameter]
            public string Title { get; set; }

            [Parameter]
            public RenderFragment<TItem> GridRow { get; set; }

            [Parameter]
            public List<TItem> Items { get; set; }

            public List<TItem> ItemList { get; set; }

            public int PageSize { get; set; }
            public int TotalPages { get; set; }
            public int CurrentPage { get; set; }

            [Parameter]
            public bool ReloadList { get; set; }

            protected override void OnInitialized()
            {

                PageSize = 5;

                if (Items != null)
                {
                    ItemList = Items.Take(PageSize).ToList();
                    TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
                }


            }



            protected override void OnAfterRender(bool firstRender)
            {

                if (!firstRender && ReloadList)
                {
                    UpdateList();
                    ReloadList = false;

                    StateHasChanged();
                }


            }

            private void UpdateList(int pageNumber = 0)
            {
                if (Items != null)
                {
                    //pageNumber * pageSize -> take 5
                    ItemList = Items.Skip(pageNumber * PageSize).Take(PageSize).ToList();
                    TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
                    CurrentPage = pageNumber;
                }
            }

            private void NavigateTo(string direction)
            {
                if (direction == "prev" && CurrentPage != 0)
                    CurrentPage -= 1;
                if (direction == "next" && CurrentPage != TotalPages - 1)
                    CurrentPage += 1;
                if (direction == "first")
                    CurrentPage = 0;
                if (direction == "last")
                    CurrentPage = TotalPages - 1;

                UpdateList(CurrentPage);
            } }
