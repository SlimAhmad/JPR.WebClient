@inject ICategoryService categoryService
@inject ISectorTypeService sectorTypeService
@inject ISectorService sectorService
@inject AuthenticationStateProvider authenticationStateProvider

<div class="col-xl-4 col-lg-5 ">


    @if (SectorTypes != null)
    {
<GridViewTemplate Items="SectorTypes" ReloadList="IsGridViewFiltered">
    <GridColumns>


        <GridColumnTemplatedCompnent ColumnTitle="@ColumnTitle"></GridColumnTemplatedCompnent>


        <GridColumnTemplatedCompnent ColumnTitle="Actions"></GridColumnTemplatedCompnent>

    </GridColumns>
    <GridRow Context="SectorType">
        <td>@SectorType.Sector</td>

        <td>
            <a @onclick="(()=> OpenEditSectorTypeModal(null))"> <i class="fa fa-upload fa-1x fa-sm fa-fw text-success"></i></a>
            <a @onclick="(()=> DeleteSectorTypeModal(SectorType))"><i class="fas fa-trash fa-1x fa-sm fa-fw text-danger"></i></a>
            <a @onclick="(()=> OpenEditSectorTypeModal(SectorType))" data-toggle="modal" data-target="#Modal"> <i class="fa fa-user-edit fa-1x fa-sm fa-fw text-primary"></i></a>
        </td>

    </GridRow>
</GridViewTemplate>}
    @if (Categories != null)
    {
<GridViewTemplate Items="Categories" ReloadList="IsGridViewFiltered">
    <GridColumns>


        <GridColumnTemplatedCompnent ColumnTitle="@ColumnTitle"></GridColumnTemplatedCompnent>


        <GridColumnTemplatedCompnent ColumnTitle="Actions"></GridColumnTemplatedCompnent>

    </GridColumns>
    <GridRow Context="Category">
        <td>@Category.Category</td>

        <td>
            <a @onclick="(()=> OpenEditCategoryModal(null))"> <i class="fa fa-upload fa-1x fa-sm fa-fw text-success"></i></a>
            <a @onclick="(()=> DeleteCategoryModal(Category))"><i class="fas fa-trash fa-1x fa-sm fa-fw text-danger"></i></a>
            <a @onclick="(()=> OpenEditCategoryModal(Category))" data-toggle="modal" data-target="#Modal"> <i class="fa fa-user-edit fa-1x fa-sm fa-fw text-primary"></i></a>
        </td>

    </GridRow>
</GridViewTemplate>}

</div>

@code { [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [Parameter]
    public CategoryApiModel Category { get; set; }
    public bool IsGridViewFiltered { get; set; } = true;
    [Parameter]
    public string ColumnTitle { get; set; }
    [Parameter]
    public SectorTypeApiModel SectorType { get; set; }
    [Parameter] public ItemToView Item { get; set; }
    async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Ok(true));
    async Task Cancel() => await BlazoredModal.CancelAsync();
    [CascadingParameter]
    public IModalService Modal { get; set; }
    [Parameter]
    public List<CategoryApiModel> Categories { get; set; }
    [Parameter]
    public List<SectorTypeApiModel> SectorTypes { get; set; }
    bool isLoading = true;
    [Parameter]
    public EventCallback<bool> OnCRUD { get; set; }




    private async Task LoadPSType()
    {

        await Task.Delay(500);
        var token = await ((AuthStateProvider)authenticationStateProvider).GetTokenAsync();
        SectorTypes = await sectorTypeService.GetSectorTypesAsync(token);
        isLoading = false;
        StateHasChanged();

    }


    private async Task LoadCategories()
    {

        await Task.Delay(500);
        var token = await ((AuthStateProvider)authenticationStateProvider).GetTokenAsync();
        Categories = await categoryService.GetCategoriesAsync(token);
        isLoading = false;
        StateHasChanged();

    }


    async Task OpenEditCategoryModal(CategoryApiModel model)
    {

        var emptyCategory = new CategoryApiModel();
        var options = new ModalOptions { UseCustomLayout = true, Position = ModalPosition.Center, ContentScrollable = true };
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditCatSecModal.Title), "Edit Project");
        parameters.Add(nameof(EditCatSecModal.CssClass), "modal-lg");
        if (model != null)
            parameters.Add(nameof(EditCatSecModal.Category), model);
        else
            parameters.Add(nameof(EditCatSecModal.Category), emptyCategory);

        var modal = Modal.Show<EditCatSecModal>("Custom Layout", parameters, options);
        await modal.Result;
        await LoadCategories();
        await OnCRUD.InvokeAsync(true);



    }

    async Task DeleteCategoryModal(CategoryApiModel model)
    {

        var options = new ModalOptions { UseCustomLayout = true, Position = ModalPosition.Center };
        var parameters = new ModalParameters();
        parameters.Add(nameof(DeleteModal.Message), "Are you sure you want to delete this project!!");
        parameters.Add(nameof(DeleteModal.Title), "Alert");
        parameters.Add(nameof(DeleteModal.Category), model);
        parameters.Add(nameof(DeleteModal.Item), ItemDelete.PCategory);

        var modal = Modal.Show<DeleteModal>("Custom Layout", parameters, options);
        await modal.Result;
        await LoadCategories();
        await OnCRUD.InvokeAsync(true);


    }

    async Task OpenEditSectorTypeModal(SectorTypeApiModel model = null)
    {

        var emptySectorType = new SectorTypeApiModel();
        var options = new ModalOptions { UseCustomLayout = true, Position = ModalPosition.Center, ContentScrollable = true };
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditCatSecModal.Title), "Edit Project");
        parameters.Add(nameof(EditCatSecModal.CssClass), "modal-lg");
        if (model != null)
            parameters.Add(nameof(EditCatSecModal.SectorType), model);
        else
            parameters.Add(nameof(EditCatSecModal.SectorType), emptySectorType);
        var modal = Modal.Show<EditCatSecModal>("Custom Layout", parameters, options);
        await modal.Result;
        await LoadPSType();
        await OnCRUD.InvokeAsync(true);


    }

    async Task DeleteSectorTypeModal(SectorTypeApiModel model)
    {

        var options = new ModalOptions { UseCustomLayout = true, Position = ModalPosition.Center };
        var parameters = new ModalParameters();
        parameters.Add(nameof(DeleteModal.Message), "Are you sure you want to delete this project!!");
        parameters.Add(nameof(DeleteModal.Title), "Alert");
        parameters.Add(nameof(DeleteModal.SectorType), model);
        parameters.Add(nameof(DeleteModal.Item), ItemDelete.PSectorType);
        var modal = Modal.Show<DeleteModal>("Custom Layout", parameters, options);
        await modal.Result;
        await LoadPSType();
        await OnCRUD.InvokeAsync(true);

    } }
