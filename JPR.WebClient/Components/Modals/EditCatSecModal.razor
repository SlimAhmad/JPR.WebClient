@inject AuthenticationStateProvider authenticationStateProvider
@inject IToastService toastService
@inject ICategoryService categoryService
@inject IJSRuntime JS
@inject ISectorTypeService sectorTypeService
@inject ISectorService sectorService
@inject NavigationManager navigationManger
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@using JPR.WebClient.Components


<div class="modal fade show d-block mt-5" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="Cancel"></div>
    <div class="modal-dialog @CssClass" style="z-index: 1050">
        <!-- Pop it above the backdrop -->
        <div class="modal-content">
            <div class="modal-header bg-gradient-dark">
                <h5 class="modal-title text-white">@Title</h5>
                <button type="button" class="close bg-transparent" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true" class="text-danger">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-12 p-5">
                        <!-- Form Basic -->
                        @if (SectorType != null)
                        {
            <div class="row">
                <div class="col-12">
                    <EditForm Model="SectorType" OnSubmit="ValidateSubmit">
                        <div class="row">
                            <div class="col-4">
                                <div class="form-group">
                                    <label for="exampleInputEmail1">Project Name</label>
                                    <InputText type="text" @bind-Value="SectorType.Sector" class="form-control"
                                               placeholder="Enter email" />
                                </div>
                            </div>
                            <div class="col-4">

                                <div class="p-2">
                                    <button type="submit" class="btn btn-primary btn-block">Submit</button>

                                </div>

                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>}
                        @if (Category != null)
                        {

            <div class="row">
                <div class="col-12">
                    <EditForm Model="Category" OnSubmit="ValidateSubmit">
                        <div class="row">
                            <div class="col-4">
                                <div class="form-group">
                                    <label for="exampleInputEmail1">Project Name</label>
                                    <InputText type="text" @bind-Value="Category.Category" class="form-control"
                                               placeholder="Enter email" />
                                </div>
                            </div>
                            <div class="col-4">

                                <div class="p-2">
                                    <button type="submit" class="btn btn-primary btn-block">Submit</button>

                                </div>

                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>}


                    </div>
                </div>

            </div>

        </div>

    </div>
</div>


@code { [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }



    [Parameter]
    public SectorTypeApiModel SectorType { get; set; }

    [Parameter]
    public CategoryApiModel Category { get; set; }

    public bool IsEnabled { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    public async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Ok(true));

    public async Task Cancel() => await BlazoredModal.CancelAsync();


    protected override void OnInitialized()
    {
        base.OnInitialized();

    }




    private async Task<bool> ValidateSubmit()
    {
        //assume that user is valid
        //call an API
        var token = await ((AuthStateProvider)authenticationStateProvider).GetTokenAsync();


        if (SectorType != null)
            await SubmitSectorType(token);
        if (Category != null)
            await SubmitCategory(token);

        await BlazoredModal.CloseAsync(ModalResult.Ok(true));
        toastService.ShowSuccess("Successfully submittted");


        return await Task.FromResult(true);
    }


    #region Helper Methods

    private async Task SubmitSectorType(string token)
    {
        if (SectorType.Id != 0)
            await sectorTypeService.UpdateSectorTypeAsync(token, SectorType);
        else
            await sectorTypeService.AddSectorTypeAsync(token, SectorType);
    }


    private async Task SubmitCategory(string token)
    {
        if (Category.Id != 0)
            await categoryService.UpdateCategoryAsync(token, Category);
        else
            await categoryService.AddCategoryAsync(token, Category);
    }

    #endregion
}
