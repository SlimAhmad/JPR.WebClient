@inject AuthenticationStateProvider authenticationStateProvider
@inject IToastService toastService

<div class="modal fade show d-block mt-5" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="Cancel"></div>
    <div class="modal-dialog @CssClass" style="z-index: 1050">
        <!-- Pop it above the backdrop -->
        <div class="modal-content">
            <div class="modal-header bg-gradient-dark">
                <h5 class="modal-title text-white">@Title</h5>
                <button type="button" class="close bg-transparent" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true" class="text-danger">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row ">
                    <div class="col-lg-12">
                        <!-- Form Basic -->

                        <div class="row">
                            <div class="col-12 p-5">
                                <EditForm Model="Person" OnSubmit="ValidateSubmit">
                                    <div class="row">
                                        <div class="col-6">
                                            <div class="form-group">
                                                <label for="exampleInputEmail1">First Name</label>
                                                <InputText type="text" @bind-Value="Person.FirstName" class="form-control"
                                                           placeholder="Enter First Name" />
                                            </div>
                                            <div class="form-group">
                                                <label for="exampleInputEmail1">Last Name</label>
                                                <InputText type="text" @bind-Value="Person.LastName" class="form-control"
                                                           placeholder="Enter Last Name" />
                                            </div>
                                            <div class="input-group mb-3">
                                                <InputText type="text" @bind-Value="Person.Username" class="form-control"
                                                           placeholder="Enter Username" />
                                                <div class="input-group-append">
                                                    <span class="input-group-text" id="basic-addon2">Username</span>
                                                </div>
                                            </div>

                                            <div class="input-group mb-3">
                                                <div class="input-group-prepend bg-gradient-success">
                                                    <span class="input-group-text " id="basic-addon1">@@</span>
                                                </div>
                                                <InputText type="email" @bind-Value="Person.Email" class="form-control"
                                                           placeholder="Enter email" @attributes="Disabled" />
                                            </div>


                                        </div>
                                        <div class="col-5">
                                            <div class="form-group">
                                                <label for="exampleInputEmail1">Phone Number</label>
                                                <InputText type="text" @bind-Value="Person.PhoneNumber" class="form-control"
                                                           placeholder="Enter Phone Number" />
                                            </div>
                                            <div class="form-group">
                                                <label for="exampleInputEmail1">Password</label>
                                                <InputText type="Password" @bind-Value="Person.Password" class="form-control" />
                                            </div>
                                            <div class="form-group">
                                                <label for="exampleInputEmail1">Confirm Password</label>

                                            </div>
                                            <div class="form-group ">
                                                <label for="exampleInputEmail1">Role</label>
                                                <InputSelect type="text" @bind-Value="Person.Role" class="form-control"
                                                             placeholder="Select">
                                                    @foreach (var role in Roles)
                                                    {
                                <option value="@role.Role">@Char.ToUpper(role.Role[0])@role.Role.Substring(1)</option>}

                                                </InputSelect>
                                                <div class="justify-content-end align-content-end mt-1">
                                                    <button type="submit" class="btn bg-gradient-success btn-block  btn-sm p-3 mt-2 text-white "> Submit</button>
                                                </div>

                                            </div>

                                        </div>
                                    </div>

                                </EditForm>
                            </div>

                        </div>




                    </div>
                </div>

            </div>

        </div>

    </div>
</div>


@code { [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public RegisterCredentialsApiModel Person { get; set; }

    public RegisterCredentialsApiModel User { get; set; }
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public List<RoleApiModel> Roles { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public Dictionary<string, object> Disabled { get; set; } = new Dictionary<string, object>()
{
        {"disabled", "disabled" }
    };

    public async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Ok(true));

    public async Task Cancel() => await BlazoredModal.CancelAsync();

    protected override async Task OnInitializedAsync()
    {
        if (Person.Id == null)
            Disabled = null;


    }





    private async Task<bool> ValidateSubmit()
    {
        //assume that user is valid
        //call an API
        var token = await ((AuthStateProvider)authenticationStateProvider).GetTokenAsync();
        if (Person.Id != null)
            await userService.UpdateUser(token, Person);
        else
            await userService.RegisterUser(token, Person);

        await BlazoredModal.CloseAsync(ModalResult.Ok(true));
        toastService.ShowSuccess("Successfully submittted");

        return await Task.FromResult(true);
    } }
