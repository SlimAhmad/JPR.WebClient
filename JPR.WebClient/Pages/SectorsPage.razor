@page "/sectors"
@inject AuthenticationStateProvider authenticationStateProvider
@inject IToastService toastService
@inject ISectorService sectorService
@inject ICategoryService categoryService
@inject ISectorTypeService sectorTypeService
    <!-- Container Fluid-->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-success">DataTables</h1>
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="index" class="text-success">Home</a></li>
        <li class="breadcrumb-item">Tables</li>
        <li class="breadcrumb-item active" aria-current="page">DataTables</li>
    </ol>
</div>
<div class="row mb-3">


    <SpinLoader IsLoading="isLoading">
        <LoadingTemplate>
            <div class="col-12" style="vertical-align:middle">
                <br /><br />
                <Chase Center="true" Color="#ffff" Size="70px"></Chase>
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            <!--Sectors information Forms-->
            <div class="col-xl-8 col-lg-7 ">
                <div class="card mb-4  bg-white ">
                    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between bg-white mt-3">
                        <h6 class="m-0 font-weight-bold text-dark">Sectors Information</h6>

                    </div>
                    <div class="card-body bg-white mt-3 mb-2">
                        <EditForm Model="Sector" OnSubmit="ValidateSubmit">
                            <div class="row">
                                <div class="col-6">
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Contractor Name</label>
                                        <InputText type="text" @bind-Value="Sector.SectorTitle" class="form-control"
                                                   placeholder="Enter Name" />
                                    </div>
                                    <div class="form-group ">
                                        <label for="exampleInputEmail1">Sectors Sector</label>
                                        <InputSelect type="text" @bind-Value="Sector.SectorId" class="form-control">
                                            <option></option>
                                            @foreach (var sector in SectorTypes)
                                            {

                    <option value="@sector.Id">@sector.Sector</option>}

                                        </InputSelect>




                                    </div>

                                </div>

                                <div class="col-4">

                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Sectors Category</label>
                                        <InputSelect type="text" @bind-Value="Sector.CategoryId" class="form-control">
                                            <option></option>
                                            @foreach (var category in Categories)
                                            {

                    <option value="@category.Id">@category.Category</option>}

                                        </InputSelect>




                                    </div>

                                    <div class=" mt-5">
                                        <button type="submit" class="btn  btn-primary btn-block">Submit</button>

                                    </div>
                                </div>

                            </div>

                        </EditForm>



                    </div>
                    <div class="card-footer bg-white"></div>
                </div>
            </div>

            <!--PCategories Card-->
            <PCatSecComponent Categories="Categories" ColumnTitle="Categories" OnCRUD="OnCRUD"></PCatSecComponent>
            <div class="col-xl-8 col-lg-7 ">

                @if (FilteredSectorsList != null)
                {
<GridViewTemplate Items="FilteredSectorsList" ReloadList="IsGridViewFiltered">
    <GridColumns>


        <GridColumnTemplatedCompnent ColumnTitle="Sector"
                                     OnSearchTextChanged="@(e => OnUserSearchTextChanged(e, "Sector"))"></GridColumnTemplatedCompnent>
        <GridColumnTemplatedCompnent ColumnTitle="Category"
                                     OnSearchTextChanged="@(e => OnUserSearchTextChanged(e, "Category"))"></GridColumnTemplatedCompnent>
        <GridColumnTemplatedCompnent ColumnTitle="Sector Type"
                                     OnSearchTextChanged="@(e => OnUserSearchTextChanged(e, "Sector Type"))"></GridColumnTemplatedCompnent>


        <GridColumnTemplatedCompnent ColumnTitle="Actions"></GridColumnTemplatedCompnent>

    </GridColumns>
    <GridRow Context="Sector">
        <td>@Sector.SectorTitle</td>
        <td>@Sector.CategoryName</td>
        <td>@Sector.SectorName</td>
        <td>
            <a @onclick="(()=> EditSector(Sector))" @onmouseleave="LoadSectors"> <i class="fa fa-user-edit fa-1x fa-sm fa-fw text-primary"></i></a>
            <a @onclick="(()=> DeleteSectorsModal(Sector))"><i class="fas fa-trash fa-1x fa-sm fa-fw text-danger"></i></a>

        </td>

    </GridRow>
</GridViewTemplate>}
            </div>

            <PCatSecComponent SectorTypes="SectorTypes" ColumnTitle="Sector Types" OnCRUD="OnCRUD"></PCatSecComponent>
        </ContentTemplate>

    </SpinLoader>


</div>


@code { public SectorsApiModel Sector { get; set; }
    public List<SectorsApiModel> Sectors { get; set; }
    public List<SectorsApiModel> FilteredSectorsList { get; set; }
    public List<CategoryApiModel> Categories { get; set; }
    public List<SectorTypeApiModel> SectorTypes { get; set; }
    bool isLoading = true;
    public SectorsApiModel EmptySector { get; set; }
    public bool IsGridViewFiltered { get; set; } = true;
    [CascadingParameter]
    public IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Sector = new SectorsApiModel();
        Categories = new List<CategoryApiModel>();
        SectorTypes = new List<SectorTypeApiModel>();
        await LoadSectors();
        await LoadCategories();
        await LoadPSType();
    }

    public async Task OnCRUD()
    {
        await LoadSectors();
        await LoadCategories();
        await LoadPSType();

    }

    private async Task LoadSectors()
    {

        await Task.Delay(500);
        var token = await ((AuthStateProvider)authenticationStateProvider).GetTokenAsync();
        Sectors = FilteredSectorsList = await sectorService.GetSectorsAsync(token);
        isLoading = false;
        StateHasChanged();

    }

    private async Task LoadPSType()
    {

        await Task.Delay(500);
        var token = await ((AuthStateProvider)authenticationStateProvider).GetTokenAsync();
        SectorTypes = await sectorTypeService.GetSectorTypesAsync(token);
        isLoading = false;
        StateHasChanged();

    }

    private async Task LoadCategories()
    {

        await Task.Delay(500);
        var token = await ((AuthStateProvider)authenticationStateProvider).GetTokenAsync();
        Categories = await categoryService.GetCategoriesAsync(token);
        isLoading = false;
        StateHasChanged();

    }

    private async Task<bool> ValidateSubmit()
    {
        //assume that user is valid
        //call an API
        var token = await ((AuthStateProvider)authenticationStateProvider).GetTokenAsync();
        if (Sector.Id != 0)
            await sectorService.UpdateSectorAsync(token, Sector);
        else
            await sectorService.AddSectorAsync(token, Sector);
        Sector = new SectorsApiModel();
        await LoadSectors();
        toastService.ShowSuccess("Successfully submittted");

        return await Task.FromResult(true);
    }

    public void EditSector(SectorsApiModel model)
    {

        Sector = model;

    }


    private async Task DeleteSectorsModal(SectorsApiModel model)
    {

        var options = new ModalOptions { UseCustomLayout = true, Position = ModalPosition.Center };
        var parameters = new ModalParameters();
        parameters.Add(nameof(DeleteModal.Message), "Are you sure you want to delete this project!!");
        parameters.Add(nameof(DeleteModal.Title), "Alert");
        parameters.Add(nameof(DeleteModal.Sector), model);
        parameters.Add(nameof(DeleteModal.Item), ItemDelete.Sector);
        var modal = Modal.Show<DeleteModal>("Custom Layout", parameters, options);
        await modal.Result;
        await LoadSectors();

    }

    private void OnUserSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();
        IsGridViewFiltered = true;

        switch (columnTitle)
        {
            case "Category":
                FilteredSectorsList = Sectors.Where(x => x.CategoryName.ToString().Contains(searchText)).ToList();
                break;
            case "Sector Type":
                FilteredSectorsList = Sectors.Where(x => x.SectorName.ToLower().ToString().Contains(searchText)).ToList();
                break;
            case "Sector":
                FilteredSectorsList = Sectors.Where(x => x.SectorTitle.ToString().Contains(searchText)).ToList();
                break;

            default:
                Console.WriteLine("Default case");
                break;
        }
    } }
