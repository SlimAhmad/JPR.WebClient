@page  "/projects"
@inject IProjectService projectService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject ISectorService sectorService
@inject IJSRuntime JS
@using Components.Modals
@using System.Security.Claims

<!-- Container Fluid-->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-success">DataTables</h1>
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="index" class="text-success">Home</a></li>
        <li class="breadcrumb-item">Tables</li>
        <li class="breadcrumb-item active" aria-current="page">DataTables</li>
    </ol>
</div>


<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>
        <div class="col-12" style="vertical-align:middle">
            <br /><br />
            <Chase Center="true" Color="#ffff" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <button class="btn" @onclick="(()=> OpenEditProjectModal(Project))">
            <i class="fa  fa-edit fa-lg fa-fw text-white ml-2 mt-3"></i>
            <p class="text-white ml-2 mt-1 text-sm-left small text-success">Add A Project</p>
        </button>
        @if (FilteredProjectList != null)
        {
<GridViewTemplate Items="FilteredProjectList" ReloadList="IsGridViewFiltered">
    <GridColumns>
        <GridColumnTemplatedCompnent ColumnTitle="Project"
                                     OnSearchTextChanged="@(e => OnUserSearchTextChanged(e, "Project"))"></GridColumnTemplatedCompnent>
        <GridColumnTemplatedCompnent ColumnTitle="Commissioned"
                                     OnSearchTextChanged="@(e => OnUserSearchTextChanged(e, "Commissioned"))"></GridColumnTemplatedCompnent>
        <GridColumnTemplatedCompnent ColumnTitle="Completion"
                                     OnSearchTextChanged="@(e => OnUserSearchTextChanged(e, "Completion"))"></GridColumnTemplatedCompnent>
        <GridColumnTemplatedCompnent ColumnTitle="Contractor"
                                     OnSearchTextChanged="@(e => OnUserSearchTextChanged(e, "Contractor"))"></GridColumnTemplatedCompnent>
        <GridColumnTemplatedCompnent ColumnTitle="Budeget"
                                     OnSearchTextChanged="@(e => OnUserSearchTextChanged(e, "Budeget"))"></GridColumnTemplatedCompnent>
        <GridColumnTemplatedCompnent ColumnTitle="Sector"
                                     OnSearchTextChanged="@(e => OnUserSearchTextChanged(e, "Sector"))"></GridColumnTemplatedCompnent>
        <GridColumnTemplatedCompnent ColumnTitle="Location"
                                     OnSearchTextChanged="@(e => OnUserSearchTextChanged(e, "Location"))"></GridColumnTemplatedCompnent>
        <GridColumnTemplatedCompnent ColumnTitle="Actions"></GridColumnTemplatedCompnent>

    </GridColumns>
    <GridRow Context="Project">
        <td>@Project.Title</td>
        <td>@Project.Commissioned</td>
        <td>@Project.Completion</td>
        <td>@Project.ContractorName</td>
        <td>@Project.Budget</td>

        <td>@Project.SectorName</td>
        <td>@Project.Location</td>
        <td>
            <a @onclick="(()=> OpenProjectViewModal(Project))"><i class="fas fa-box-open fa-1x fa-sm fa-fw text-success"></i></a>
            <a @onclick="(()=> DeleteProjectModal(Project))"><i class="fas fa-trash fa-1x fa-sm fa-fw text-danger"></i></a>
            <a @onclick="(()=> OpenEditProjectModal(Project))" data-toggle="modal" data-target="#Modal"> <i class="fa fa-user-edit fa-1x fa-sm fa-fw text-primary"></i></a>
        </td>

    </GridRow>
</GridViewTemplate>}
    </ContentTemplate>
</SpinLoader>


@code { public ProjectsApiModel Project { get; set; }
    public List<ProjectsApiModel> Projects { get; set; }
    public List<SectorsApiModel> Sectors { get; set; }
    public List<ProjectsApiModel> FilteredProjectList { get; set; }
    bool isLoading = true;
    public bool IsGridViewFiltered { get; set; } = true;

    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Project = new ProjectsApiModel();
        await LoadProjects();
        await LoadSectors();

    }
    private async Task LoadProjects()
    {

        await Task.Delay(500);
        var token = await ((AuthStateProvider)authenticationStateProvider).GetTokenAsync();
        Projects = FilteredProjectList = await projectService.GetProjectsAsync(token);
        isLoading = false;
        StateHasChanged();

    }

    private async Task LoadSectors()
    {

        await Task.Delay(500);
        var token = await ((AuthStateProvider)authenticationStateProvider).GetTokenAsync();
        Sectors = await sectorService.GetSectorsAsync(token);
        isLoading = false;
        StateHasChanged();

    }



    async Task OpenProjectViewModal(ProjectsApiModel model)
    {

        var options = new ModalOptions { UseCustomLayout = true, Position = ModalPosition.Center };
        var parameters = new ModalParameters();

        parameters.Add(nameof(ProjectViewModal.Title), "Project");
        parameters.Add(nameof(ProjectViewModal.Project), model);
        parameters.Add(nameof(ProjectViewModal.CssClass), "modal-lg");
        var modal = Modal.Show<ProjectViewModal>("Custom Layout", parameters, options);
        await modal.Result;
        await LoadProjects();
    }





    async Task OpenEditProjectModal(ProjectsApiModel model)
    {

        var options = new ModalOptions { UseCustomLayout = true, Position = ModalPosition.Center, ContentScrollable = true };
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditProjectsModal.Title), "Project information");
        parameters.Add(nameof(EditProjectsModal.CssClass), "modal-xl");
        parameters.Add(nameof(EditProjectsModal.Project), model);
        parameters.Add(nameof(EditProjectsModal.Sectors), Sectors);
        var modal = Modal.Show<EditProjectsModal>("Custom Layout", parameters, options);
        await modal.Result;
        await LoadProjects();
    }
    async Task DeleteProjectModal(ProjectsApiModel model)
    {

        var options = new ModalOptions { UseCustomLayout = true, Position = ModalPosition.Center };
        var parameters = new ModalParameters();
        parameters.Add(nameof(DeleteModal.Message), "Are you sure you want to delete this project!!");
        parameters.Add(nameof(DeleteModal.Title), "Alert");
        parameters.Add(nameof(DeleteModal.Project), model);
        parameters.Add(nameof(DeleteModal.Item), ItemDelete.Project);
        var modal = Modal.Show<DeleteModal>("Custom Layout", parameters, options);
        await modal.Result;
        await LoadProjects();
    }

    private void OnUserSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();
        IsGridViewFiltered = true;

        switch (columnTitle)
        {
            case "Budget":
                FilteredProjectList = Projects.Where(x => x.Budget.ToString().Contains(searchText)).ToList();
                break;
            case "Project Category":
                FilteredProjectList = Projects.Where(x => x.CategoryName.ToLower().ToString().Contains(searchText)).ToList();
                break;
            case "Commissioned":
                FilteredProjectList = Projects.Where(x => x.Commissioned.ToString().Contains(searchText)).ToList();
                break;
            case "Completion":
                FilteredProjectList = Projects.Where(x => x.Completion.ToString().Contains(searchText)).ToList();
                break;
            case "Contractor":
                FilteredProjectList = Projects.Where(x => x.ContractorName.ToLower().ToString().Contains(searchText)).ToList();
                break;
            case "Location":
                FilteredProjectList = Projects.Where(x => x.Location.ToLower().ToString().Contains(searchText)).ToList();
                break;
            case "Sector":
                FilteredProjectList = Projects.Where(x => x.SectorName.ToLower().ToString().Contains(searchText)).ToList();
                break;
            case "Project":
                FilteredProjectList = Projects.Where(x => x.Title.ToLower().ToString().Contains(searchText)).ToList();
                break;
            case "Status":
                FilteredProjectList = Projects.Where(x => x.Status.ToString().Contains(searchText)).ToList();
                break;
            default:
                Console.WriteLine("Default case");
                break;
        }
    } }
